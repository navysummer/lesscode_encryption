name: Build and Publish Python Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Package
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-22.04, macos-10.14, windows-2019 ]
        python-version: [ 3.7, 3.8, 3.9 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install maturin
        run: pip install maturin

      - name: Build and publish wheel on window or macos
        if: runner.os != 'Linux'
        run: maturin build --release

      #      - name: Build and publish wheel on linux
      #        if: runner.os == 'Linux'
      #        run: |
      #          echo ${{ github.workspace }}
      #          ls -al ${{ github.workspace }}
      #          docker build -t my-build-env ${{ github.workspace }}
      #          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace my-build-env maturin build --release
      #
      #      - name: Audit and repair wheel (Linux only)
      #        if: runner.os == 'Linux'
      #        run: |
      #          pip install auditwheel
      #          for whl in target/wheels/*.whl; do
      #            auditwheel repair "$whl" -w target/wheels/
      #          done

      - name: Upload built wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: target/wheels/*.whl

  publish:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-ubuntu-latest-${{ matrix.python-version }}
          path: dist/

      - name: Install Twine
        run: pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*.whl
